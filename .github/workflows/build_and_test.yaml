name: CI

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      GENIUS_ACCESS_TOKEN: ${{ secrets.GENIUS_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@0609f0983b7a228f052f81ef4c3d6510cae254ad
        with:
          version: 8.5.0
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "pnpm"
      - run: cd backend
      - run: pnpm install --frozen-lockfile
      - run: pnpm test
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: 'coverage/lcov-report'

  deploy_coverage:
    needs: test

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  deploy_serverless:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@0609f0983b7a228f052f81ef4c3d6510cae254ad
        with:
          version: 8.5.0
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "pnpm"
      - run: cd backend
      - run: pnpm install --frozen-lockfile
      - name: serverless deploy
        uses: serverless/github-action@v3.2
        with:
          args: deploy
        env:
          GENIUS_ACCESS_TOKEN: ${{ secrets.GENIUS_ACCESS_TOKEN }}
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
      
    
